I"èM<h1 id="reversing-discount-vmprotect---465-pts">[REVERSING] Discount VMProtect - 465 Pts.</h1>
<p><br /></p>

<h1 id="challenge-description">Challenge Description:</h1>

<p><img src="images/discountvmprotect_1.png" alt="lol it didn't load" /></p>

<p><br />
Then the challenge gives us this file:
<img src="images/discountvmprotect_2.png" alt="lol it didn't load" /></p>

<p><br />
Let‚Äôs see what the ELF file does.
<img src="images/discountvmprotect_3.png" alt="lol it didn't load" /></p>

<p>It basically asks for a password then checks if it matches to the password embedded inside the executable, which is also probably the flag.</p>

<p><br />
Let‚Äôs run gdb on it and do static analysis. Let‚Äôs check for functions and how much symbols is left since the <code class="language-plaintext highlighter-rouge">file</code> command says it is stripped.</p>

<p><img src="images/discountvmprotect_4.png" alt="lol it didn't load" />
Hmmm‚Ä¶ There is no main and only plt entries remained. Let‚Äôs find the entry point and the main then.
<br />
The entry point is at <code class="language-plaintext highlighter-rouge">0x400770</code>.
<img src="images/discountvmprotect_5.png" alt="lol it didn't load" /></p>

<p><br />
Then our main address is 0x400c88.
<img src="images/discountvmprotect_6.png" alt="lol it didn't load" />
<br /></p>

<p>This is the whole main assembly code
<img src="images/discountvmprotect_7.png" alt="lol it didn't load" /></p>

<p>Summary of main:</p>
<ul>
  <li>The program asks for user input and stores it to 0x6026a0, calls 0x400857, then if the first byte from 0x6025a0 is 1, then we got the password.</li>
</ul>

<p><br />
Let‚Äôs check Ghidra if we got the same analysis to it.
<img src="images/discountvmprotect_9.png" alt="lol it didn't load" />
We got the same analysis. Great! We noticed also that the 0x400857 is called two times. Let‚Äôs see what 0x400857 does.
<br />
In Ghidra:
<img src="images/discountvmprotect_10.png" alt="lol it didn't load" />
Hmmm‚Ä¶ weird, it only returns. Let‚Äôs check gdb then.
<br /></p>

<p>In GDB:
<img src="images/discountvmprotect_8.png" alt="lol it didn't load" />
It looks like this function offers a lot more than just returning. It pushes 0x2361ca to the stack then it XORs it with 0x636465. The value after XORing is 0x40087f then returning. Since 0x40087f is the top of the stack, the code actually jumps to that address instead of going back to main. Let‚Äôs check Ghidra what‚Äôs inside 0x40087f.
<img src="images/discountvmprotect_11.png" alt="lol it didn't load" />
<img src="images/discountvmprotect_12.png" alt="lol it didn't load" />
<img src="images/discountvmprotect_13.png" alt="lol it didn't load" />
Woah! I think we just stumbled a treasure! However, there‚Äôs a lot of code and it looks scary. Second, what‚Äôs the deal with this loop? After a lot of headbanging and searching, I found this article about VM protectd binaries. I suggest to give it a read. <a href="https://resources.infosecinstitute.com/reverse-engineering-virtual-machine-protected-binaries/#gref">VM Protected Binaries Article</a>. 
<br />
TL;DR: A Binary that‚Äôs VM protected has its own set of ‚Äúinstructions‚Äù, has a function that acts like a processor then reads the instructions, and has its own memory (stack, heap, etc. depending on the design). The 0x40087f is actually the function that executes those instructions. We can also see the values in the switch cases. These are the opcodes of the instructions.
<br />
Now that we know what the big loop is, we have to answer the following questions:
a) Where does the binary get the instructions?
b) What does each opcode do?
c) This is the main part of the program therefore the flag is connected to it somewhere and somehow. So where is it?
<br />
Let‚Äôs answer (a).
Let‚Äôs go back at 0x400857 before jumping to 0x40087f
<img src="images/discountvmprotect_8.png" alt="lol it didn't load" /></p>

<p>Before the XOR operation, we can see that rdi value is being stored to rbp-0x28:</p>
<ul>
  <li>rbp-0x28 = rdi</li>
  <li>rbp-0x8 = 0x0</li>
  <li>rbp-0x4 = 0x0</li>
</ul>

<p>Also, a very important note, those values above appeared in every operation for every opcode inside the big loop.
But what is the value of rdi? Going back to main.
<img src="images/discountvmprotect_14.png" alt="lol it didn't load" /></p>

<p>Addresses 0x602320 and 0x6020e0 are passed as arguments to 0x400857 function.
What‚Äôs inside in this address?</p>

<p>Contents: of 0x602320
<img src="images/discountvmprotect_15.png" alt="lol it didn't load" /></p>

<p>Contents: of 0x6020e0
<img src="images/discountvmprotect_16.png" alt="lol it didn't load" /></p>

<p>We can see many of the bytes are starting in 3 (i.e. 0x32, 0x36, 0x33 etc.)
Could this be the instructions? It most likely is but to confirm things let‚Äôs go Ghidra and check the decompiled code at 0x40087f.</p>

<p><img src="images/discountvmprotect_17.png" alt="lol it didn't load" /></p>

<p>Basically, what it says: 
[rbp-0x17] = [rbp-0x28][rbp-0x4]; #access the byte from [rbp-0x28] at offset [rbp-0x4]
[rbp-0x4] += 1</p>

<p>Then the value at [rbp-0x17] is being used to check against the cases for opcodes thus the addresses 0x602320 and 0x6020e0 contains the values of instructions. We should also notice that offset lies in [rbp-0x4] therefore this is the instruction pointer. 
<br />
Takeaways:
[rbp-0x28] is the base address. The value is set in the 0x400857 through rdi which came from the main function
[rbp-0x4] is the instruction pointer.
[rbp-0x8] ??? -&gt; we don‚Äôt know this yet.
<br />
Let‚Äôs answer (b):
Since there are a lot of opcodes, this is the list of each opcode and what they do.
<br />
0x30 -&gt;</p>
<ul>
  <li>it breaks the loop, ending the execution of the instructions</li>
</ul>

<p>0x31 -&gt; 0x4008cf - 0x400913</p>
<ul>
  <li>x = data supplied</li>
  <li>gets data from 0x6025a0[x] then pushes it to stack</li>
</ul>

<p>0x32 -&gt; 0x400918 - 0x400940</p>
<ul>
  <li>copies the top stack value then pushes that value to the stack</li>
</ul>

<p>0x33 -&gt; 0x400945 - 0x40097d</p>
<ul>
  <li>Loads a character from user buffer using top value of stack</li>
  <li>Replaces that top value stack from the loaded character from user buffer</li>
</ul>

<p>0x35</p>
<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>top_stack = (top_stack¬†¬ª 1)</td>
          <td>(top_stack ¬´¬†7)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Rotate to right 1 bit</li>
</ul>

<p>0x34 -&gt; 0x400982 - 0x4009bc</p>
<ul>
  <li>Changes the instruction pointer value if the top of stack is 0</li>
  <li>let x = supplied value, if top_stack == 0, rbp-0x4 = x</li>
  <li>pop data</li>
</ul>

<p>0x36</p>
<ul>
  <li>x = data supplied</li>
  <li>Push x to the stack</li>
</ul>

<p>0x37</p>
<ul>
  <li>xors two values from the stack then saves it to the -2 of the stack</li>
  <li>then ‚Äúpops‚Äù the stack, making the new value new top of stack</li>
</ul>

<p>0x38</p>
<ul>
  <li>adds two values then saves it to the -2 of the stack</li>
  <li>then ‚Äúpops‚Äù the stack, making the new value new top of stack</li>
</ul>

<p>0x39</p>
<ul>
  <li>subtracts two values (2nd top - top) then saves it to the -2 of the stack</li>
  <li>then ‚Äúpops‚Äù the stack, making the new value new top of stack</li>
</ul>

<p>0x61</p>
<ul>
  <li>top_stack = neg(top_stack)</li>
</ul>

<p>0x62</p>
<ul>
  <li>if (*0x602580 == 0x1b) and ptrace == -1) print (‚ÄúNOOOOOOOOOO!‚Äù), else *0x602580 += 1</li>
  <li>ptrace == -1 checks if debugger is present</li>
</ul>

<p>0x63 -&gt; 0x400bd2 - 0x400bef</p>
<ul>
  <li>strcpy(0x6025aa, 0x6020a0)</li>
</ul>

<p>0x64 -&gt; 0x400bf4 - 0x400c3b</p>
<ul>
  <li>x = data supplied by bytecode</li>
  <li>y = top stack value</li>
  <li>0x6025a0[x] = y</li>
  <li>pop data</li>
</ul>

<p>0x65</p>
<ul>
  <li>top_stack = 0x6025a0[top_stack]</li>
</ul>

<p><br />
Takeaways:</p>
<ul>
  <li>Notice that there is a lot of stack operations yet we don‚Äôt know where is the base address of the stack and what points to the top of the stack. Let‚Äôs take snippet from Ghidra code.
<img src="images/discountvmprotect_19.png" alt="lol it didn't load" /></li>
</ul>

<p>-We can see that [rbp-0x8] is the offset from the 0x6027a0 and adds 1 to itself whenever it saves a value. 
(You can also check the other cases. There are cases in which [rbp-0x8] decreases 1 whenever it does an operation)</p>

<p>[rbp-0x28] is the base address. The value is set in the 0x400857 through rdi which came from the main function
[rbp-0x4] is the instruction pointer.
[rbp-0x8] is the stack pointer
0x6027a0 is the base address of the stack</p>

<p><br />
Finally, let‚Äôs answer (c). Where is the flag?</p>

<p>Let‚Äôs look at the first set if instructions at address 0x602320:
<img src="images/discountvmprotect_15.png" alt="lol it didn't load" /></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="mf">0.</span>  <span class="mi">31</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mf">2.</span>  <span class="mi">63</span>
<span class="mf">3.</span>  <span class="mi">32</span>
<span class="mf">4.</span>  <span class="mi">32</span>
<span class="mf">5.</span>  <span class="mi">64</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mf">7.</span>  <span class="mi">33</span>
<span class="mf">8.</span>  <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">12</span>
<span class="n">a</span><span class="p">.</span>  <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">c</span><span class="p">.</span>  <span class="mi">38</span>
<span class="n">d</span><span class="p">.</span>  <span class="mi">32</span>
<span class="n">e</span><span class="p">.</span>  <span class="mi">32</span>
<span class="n">f</span><span class="p">.</span>  <span class="mi">39</span>
<span class="mf">10.</span> <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">3</span>
<span class="mf">12.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">23</span>
<span class="mf">14.</span> <span class="mi">39</span>
<span class="mf">15.</span> <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span><span class="n">b</span>
<span class="mf">17.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mf">19.</span> <span class="mi">64</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">1</span><span class="n">b</span><span class="p">.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">1</span><span class="n">d</span><span class="p">.</span> <span class="mi">64</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mi">1</span><span class="n">f</span><span class="p">.</span> <span class="mi">30</span> </code></pre></figure>

<p>Instructions 0-2:</p>
<ul>
  <li>gets data 0x6025a0[80] then push to stack</li>
  <li>then strcpy(0x6025aa, 0x6020a0) and sets 0x6025a0[0] = 1. Remember that this has to be 1 in order to get ‚ÄúYay‚Äù printf in the main function.</li>
</ul>

<p>Instructions 3-10:</p>
<ul>
  <li>counts the length of the user input then saves it to 0x6025a0[80]</li>
</ul>

<p>Instructions 12-1d:</p>
<ul>
  <li>0x23 - (length of user input)</li>
  <li>if not the result above 0, set 0x6025a0[0] = 0 (execution jumps directly to 1b)</li>
  <li>set 0x6025a0[80] = 0</li>
</ul>

<p>Instruction 1f:</p>
<ul>
  <li>break from the loop. Stop execution.</li>
</ul>

<p><br />
Hmmm‚Ä¶ This set of instruction is not that interesting, except for instruction 2 which copies a gibberish from 0x6020a0 to 0x6025aa.
<img src="images/discountvmprotect_20.png" alt="lol it didn't load" />
<br />
Nevertheless, we were able to grasp the execution for the first time. Let‚Äôs go to instruction set from 
<img src="images/discountvmprotect_16.png" alt="lol it didn't load" /></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="mf">0.</span>  <span class="mi">31</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mf">2.</span>  <span class="mi">32</span>
<span class="mf">3.</span>  <span class="mi">32</span>
<span class="mf">4.</span>  <span class="mi">64</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mf">6.</span>  <span class="mi">33</span>
<span class="mf">7.</span>  <span class="mi">32</span>
<span class="mf">8.</span>  <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">28</span> <span class="c1">#This jumps directly to opcode 30 -&gt; exit instruction
</span><span class="n">a</span><span class="p">.</span>  <span class="mi">35</span>
<span class="n">b</span><span class="p">.</span>  <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">63</span>
<span class="n">d</span><span class="p">.</span>  <span class="mi">37</span>
<span class="n">e</span><span class="p">.</span>  <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">98</span>
<span class="mf">10.</span> <span class="mi">38</span>
<span class="mf">11.</span> <span class="mi">61</span>
<span class="mf">12.</span> <span class="mi">62</span>
<span class="mf">13.</span> <span class="mi">31</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">80</span>
<span class="mf">15.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">a</span>
<span class="mf">17.</span> <span class="mi">38</span>
<span class="mf">18.</span> <span class="mi">65</span>
<span class="mf">19.</span> <span class="mi">39</span>
<span class="mi">1</span><span class="n">a</span><span class="p">.</span> <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">20</span>
<span class="mi">1</span><span class="n">c</span><span class="p">.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">1</span><span class="n">e</span><span class="p">.</span> <span class="mi">64</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mf">20.</span> <span class="mi">36</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span>
<span class="mf">22.</span> <span class="mi">38</span>
<span class="mf">23.</span> <span class="mi">32</span>
<span class="mf">24.</span> <span class="mi">32</span>
<span class="mf">25.</span> <span class="mi">37</span>
<span class="mf">26.</span> <span class="mi">34</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">2</span>
<span class="mf">28.</span> <span class="mi">30</span> <span class="c1">#Exit instruction</span></code></pre></figure>

<p>Instructions 0 - 12:</p>
<ul>
  <li>Saves how many characters to the 0x6025a0[80] have been ‚Äúprocessed‚Äù</li>
  <li>The character of every user input is being processed:</li>
  <li>The processing is in this order :</li>
</ul>

<p>a) char = char rotates to right 1 (Instruction a)</p>

<p>b) char = char ^ 0x63 (Instruction d)</p>

<p>c) char = char + 0x98 (Instruction 10)</p>

<p>d) char = neg(char) (Instruction 11)</p>

<p>Instruction 13 - 1e</p>
<ul>
  <li>Compares the processed character to the 0x6025a0[0xa + char counter] (Instructions 13-1a). It means, it compares to every character to the 0x6025aa, the address where the destination address of strcpy during the first instruction set! That‚Äôs it! This could be the flag! Let‚Äôs get those raw data and reverse the process to each its bytes.</li>
</ul>

<p><img src="images/discountvmprotect_21.png" alt="lol it didn't load" /></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">raw_data</span> <span class="o">=</span> <span class="s">'</span><span class="se">\x18</span><span class="s">r</span><span class="se">\xa2\xa4\x9d\x89\x1f\xa2\x8d\x9b\x94\r</span><span class="s">m</span><span class="se">\x9b\x95\xec\xec\x12\x9b\x94</span><span class="s">#</span><span class="se">\x16\x9b</span><span class="s">l</span><span class="se">\x13\x0e</span><span class="s">m</span><span class="se">\r\x96\x8d\x0e\x90\x13\x97\x8a\xbb\xcf</span><span class="s">d~</span><span class="se">\xd3\x1a</span><span class="s">@#</span><span class="se">\xec\xdf\x00\x00\x00</span><span class="s">'</span></code></pre></figure>

<p><br />
With following reversal process:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_flag</span><span class="p">(</span><span class="n">raw_data</span><span class="p">):</span>
	<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>
		<span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">raw_data</span><span class="p">:</span>
	     		<span class="n">char</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xff</span>
			<span class="n">char</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x100</span><span class="o">+</span><span class="n">char</span> <span class="o">-</span> <span class="mh">0x98</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
			<span class="n">char</span> <span class="o">=</span> <span class="n">char</span> <span class="o">^</span> <span class="mh">0x63</span>
			<span class="n">char</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(((</span><span class="n">char</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">char</span><span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xff</span> <span class="p">)</span>
			<span class="n">flag</span> <span class="o">+=</span> <span class="n">char</span>
	<span class="k">return</span> <span class="n">flag</span></code></pre></figure>

<p>The flag is:
<img src="images/discountvmprotect_22.png" alt="lol it didn't load" />
<em>X-MAS{VMs_ar3_c00l_aNd_1nt3resting}</em>
<br />
NICE! We are able to get flag!
The rest of the instructions were actually just looping back for the rest of the characters to be processed. 1 character mistake actually will make 0x6025a0[0] = 0 (Instructions 1c and 1e)
<br />
Thank you for reading this long writeup
<br />
Author‚Äôs comment:
I‚Äôve learned a lot doing this challenge and the writeup. Thank you reader for putting it up until the end and I hope you‚Äôve also learned something in this writeup.</p>

:ET