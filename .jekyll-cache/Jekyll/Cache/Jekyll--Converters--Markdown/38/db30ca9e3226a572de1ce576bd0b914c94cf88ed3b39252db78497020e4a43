I"½<h1 id="reversing-kavm---985-pts">[REVERSING] KAVM - 985 pts.</h1>

<p><br />
Weâ€™re given a file:
<img src="images/kavm_1.png# big" alt="file missing" />
<br /></p>

<p>And when we run it, it asks for magic password:
<img src="images/kavm_7.png# medium" alt="file missing" />
<br /></p>

<p>Checking it with gdb:
<img src="images/kavm_2.png# big-p" alt="file missing" />
The symbol table only contains plt entries.
Before digging in GDB, letâ€™s analyze the binary with Ghidra.
<br /></p>

<p>After Ghidra was able to analyze the file, weâ€™re able to find the main function:
<img src="images/kavm_3.png# medium-p" alt="file missing" />
<br /></p>

<p>But upon looking at GDB, we can see that there are is one more address called: 0x8048440 but we can ignore since what it does is only get the next instruction address and store it at ebx.
<img src="images/kavm_4.png# small" alt="file missing" />
<br /></p>

<p>However, whatâ€™s interesting is the result of ebx when added to 0x2ae6. Letâ€™s run and set breakpoint at address 0x8048520:
<img src="images/kavm_5.png# medium" alt="file missing" />
As we can see from above image, the value of EBX = 0x804b000. Letâ€™s check the byte contents.
<br /></p>

<p>Here is the byte contents from address0x804b000:
<img src="images/kavm_6.png# big" alt="file missing" /></p>

<p>Interesting! Some of the values lying around at different addresses looks like are printable bytes! It looks like for the VM this is where its <em>data segment</em> starts. Letâ€™s check the values:</p>
<pre><code class="language-C">Addresses:
0x804b060 -&gt; "Welcome to SECURINETS CTF!\n"
0x804b0a0 -&gt; "Give me the magic:"
0x804b0e0 -&gt; "No...\n"
0x804b120 -&gt; "Just get out ; No place for you here!\n"
0x804b1a0 -&gt; "Good Job! You win!\n"
0x804b1e0 -&gt; "Sz}hnrt|ldmcyLbc {=nx::gWu6fo6#|"
</code></pre>
<p>The string at 0x804b1e0 is the definitely the most interesting one. In fact this is actually the encrypted flag. We just have to know</p>

:ET