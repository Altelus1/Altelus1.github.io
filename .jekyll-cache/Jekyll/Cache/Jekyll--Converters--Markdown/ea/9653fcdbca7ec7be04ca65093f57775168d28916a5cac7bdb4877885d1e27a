I"B<h1 id="pwn-uncrackable---666-pts">[PWN] UNCRACKABLE - 666 pts.</h1>

<p>We’re given this file:
<img src="images/uncrackable_1.png" alt="file missing" />
<br /></p>

<p>Let’s analyze this with Ghidra. Here is the decompiled main:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>

<span class="p">{</span>
  <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">local_459</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">local_458</span> <span class="p">[</span><span class="mi">1040</span><span class="p">];</span>
  <span class="n">undefined</span> <span class="n">local_48</span> <span class="p">[</span><span class="mi">47</span><span class="p">];</span>
  <span class="kt">char</span> <span class="n">local_19</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">local_18</span><span class="p">;</span>
  <span class="kt">FILE</span> <span class="o">*</span><span class="n">local_10</span><span class="p">;</span>
  
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DAT_00102008</span><span class="p">,</span><span class="n">local_48</span><span class="p">);</span>
  <span class="n">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_459</span><span class="p">,</span><span class="s">"echo -n </span><span class="se">\'</span><span class="s">%s</span><span class="se">\'</span><span class="s">|md5sum"</span><span class="p">,</span><span class="n">local_48</span><span class="p">);</span>
  <span class="n">local_10</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_459</span><span class="p">,</span><span class="s">"r"</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">local_10</span> <span class="o">==</span> <span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Failed to run command"</span><span class="p">);</span>
                    <span class="cm">/* WARNING: Subroutine does not return */</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">local_458</span><span class="p">,</span><span class="mh">0x21</span><span class="p">,</span><span class="n">local_10</span><span class="p">);</span>
  <span class="n">local_18</span> <span class="o">=</span> <span class="s">"3b9aafa12aceeccd29a154766194a964"</span><span class="p">;</span>
  <span class="n">iVar1</span> <span class="o">=</span> <span class="n">memcmp</span><span class="p">(</span><span class="n">local_458</span><span class="p">,</span><span class="s">"3b9aafa12aceeccd29a154766194a964"</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">local_19</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">iVar1</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">local_19</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">system</span><span class="p">(</span><span class="s">"cat flag"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"not good enough"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Our task here to <em>cat</em> the flag is to give an input string that when we get its md5 it should be equal to “3b9aafa12aceeccd29a154766194a964”. Thinking to the perspective of this challenge, cracking the hash is out of the question. So how can we exploit this?
<br /></p>
<h2 id="the-vulnerability">The vulnerability</h2>
<p>Our input is directly inserted to the sprintf without proper sanitation. We can inject bash code in there.</p>

<p>(Note: Since the challenge server is not up at the time this is written, we will use our own machine as the challenge server.)</p>

<p>Let’s run the challenge locally and create a test flag:</p>

:ET