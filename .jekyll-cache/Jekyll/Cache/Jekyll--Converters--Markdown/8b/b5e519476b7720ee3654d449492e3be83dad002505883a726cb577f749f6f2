I"æ<h1 id="reversing-discount-vmprotect---465-pts">[REVERSING] Discount VMProtect - 465 Pts.</h1>
<p><br /></p>

<h1 id="challenge-description">Challenge Description:</h1>

<p><img src="images/discountvmprotect_1.png" alt="lol it didn't load" /></p>

<p><br />
Then the challenge gives us this file:
<img src="images/discountvmprotect_2.png" alt="lol it didn't load" /></p>

<p><br />
Letâ€™s see what the ELF file does.
<img src="images/discountvmprotect_3.png" alt="lol it didn't load" /></p>

<p>It basically asks for a password then checks if it matches to the password embedded inside the executable, which is also probably the flag.</p>

<p><br />
Letâ€™s run gdb on it and do static analysis. Letâ€™s check for functions and how much symbols is left since the <code class="highlighter-rouge">file</code> command says it is stripped.</p>

<p><img src="images/discountvmprotect_4.png" alt="lol it didn't load" />
Hmmmâ€¦ There is no main and only plt entries remained. Letâ€™s find the entry point and the main then.
<br />
The entry point is at <code class="highlighter-rouge">0x400770</code>.
<img src="images/discountvmprotect_5.png" alt="lol it didn't load" /></p>

<p><br />
Then our main address is 0x400c88.
<img src="images/discountvmprotect_6.png" alt="lol it didn't load" />
<br /></p>

<p>This is the whole main assembly code
<img src="images/discountvmprotect_7.png" alt="lol it didn't load" /></p>

<p>Summary of main:</p>
<ul>
  <li>The program prints â€œEnter password: â€œ</li>
  <li>From 0x6026a0 to 0x6026a0+0x100, the memory is set to null</li>
  <li>Also, 0x6026a0 is also the user buffer address where the user input password is stored</li>
  <li>The program aks the password from the user through fgets and stores it at 0x60260a0</li>
</ul>

:ET